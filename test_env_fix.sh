#!/bin/bash

# Test script to verify environment variable export fix
set -e

# Simulate the environment variables that would be set by GitHub Actions
export ENVIRONMENT="production"
export DOMAIN_NAME="test.example.com"
export DB_PASSWORD="test_db_pass"
export POSTGRES_PASSWORD="test_pg_pass"
export API_SECRET_KEY="test_secret_key"
export API_MASTER_KEY="test_master_key"
export API_VERSION="v1.0.0"
export ALGORITHM="HS256"
export ACCESS_TOKEN_EXPIRE_MINUTES="30"
export REDIS_URL="redis://redis:6379/1"
export LOG_DIRECTORY="/app/logs"
export SUDO_PASSWORD="test_sudo_pass"

# Construct database URLs (similar to manage-infra.sh)
SYNC_DATABASE_URL_VALUE="postgresql+asyncpg://barcodeboachiefamily:${DB_PASSWORD}@db/barcode_api"
DATABASE_URL_VALUE="postgresql+asyncpg://barcodeboachiefamily:${DB_PASSWORD}@db/barcode_api"

# Create a test environment variables file with the new format
GLOBAL_ENV_VARS_FILE="/tmp/test_env_vars_with_export_$$"

echo "Creating test environment variables file with export statements: ${GLOBAL_ENV_VARS_FILE}"

# Use the same approach as the fixed manage-infra.sh
cat > "${GLOBAL_ENV_VARS_FILE}" <<EOF
# Variables for infrastructure scripts - Sourced by sub-scripts
# Generated by test script
export ENVIRONMENT="${ENVIRONMENT}"
export DOMAIN_NAME="${DOMAIN_NAME}"
export NODE_ENV="${ENVIRONMENT}"
export API_SECRET_KEY="${API_SECRET_KEY}"
export API_MASTER_KEY="${API_MASTER_KEY}"
export DB_PASSWORD="${DB_PASSWORD}"
export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
export API_VERSION="${API_VERSION}"
export ALGORITHM="${ALGORITHM}"
export ACCESS_TOKEN_EXPIRE_MINUTES="${ACCESS_TOKEN_EXPIRE_MINUTES}"
export REDIS_URL="${REDIS_URL}"
export SYNC_DATABASE_URL="${SYNC_DATABASE_URL_VALUE}"
export DATABASE_URL="${DATABASE_URL_VALUE}"
export LOG_DIRECTORY="${LOG_DIRECTORY}"
export SECRET_KEY="${API_SECRET_KEY}"
export MASTER_API_KEY="${API_MASTER_KEY}"
export SUDO_PASSWORD="${SUDO_PASSWORD}"
EOF

echo "=== Contents of test environment variables file ==="
cat "${GLOBAL_ENV_VARS_FILE}"
echo "=== End of test environment variables file ==="

# Test that variables can be properly sourced in a new shell
echo ""
echo "=== Testing sourcing in a new bash process ==="
bash -c "
unset ENVIRONMENT DOMAIN_NAME SUDO_PASSWORD NODE_ENV DB_PASSWORD

echo 'Before sourcing:'
echo 'ENVIRONMENT: \${ENVIRONMENT:-NOT_SET}'
echo 'SUDO_PASSWORD: \${SUDO_PASSWORD:+SET}'

source ${GLOBAL_ENV_VARS_FILE}

echo 'After sourcing:'
echo 'ENVIRONMENT: \${ENVIRONMENT:-NOT_SET}'
echo 'NODE_ENV: \${NODE_ENV:-NOT_SET}'
echo 'SUDO_PASSWORD: \${SUDO_PASSWORD:+SET}'
echo 'DB_PASSWORD: \${DB_PASSWORD:+SET}'

# Test if variables are properly exported to subprocesses
bash -c 'echo \"In subprocess - ENVIRONMENT: \${ENVIRONMENT:-NOT_SET}\"'
"

# Cleanup
rm -f "${GLOBAL_ENV_VARS_FILE}"
echo "Test completed successfully!"
