name: theBarcodeApi Application Deployment

# on:
#   workflow_run:
#     workflows: ["theBarcodeApi Infrastructure Setup"]
#     branches: [main]
#     types:
#       - completed
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
  API_MASTER_KEY: ${{ secrets.API_MASTER_KEY }}

jobs:
  frontend-deployment:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Determine branch
      id: get_branch
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "branch=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ steps.get_branch.outputs.branch }}

    - name: Check for frontend changes
      id: check_frontend_changes
      run: |
        if [ ! -d "/opt/thebarcodeapi/${ENVIRONMENT}/current" ]; then
          echo "First deployment detected"
          echo "changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        CURRENT_DIR="/opt/thebarcodeapi/${ENVIRONMENT}/current"
        if [ -f "${CURRENT_DIR}/.git-commit" ]; then
          DEPLOYED_COMMIT=$(cat "${CURRENT_DIR}/.git-commit")
          if git rev-parse --verify "${DEPLOYED_COMMIT}^{commit}" >/dev/null 2>&1; then
            CHANGES=$(git diff --name-only "${DEPLOYED_COMMIT}" HEAD -- 'src/' 'public/' 'package.json' 'package-lock.json' 'next.config.js' 'tailwind.config.js' || true)
          else
            CHANGES="force_update"
          fi
        else
          CHANGES="force_update"
        fi

        if [ ! -z "$CHANGES" ]; then
          echo "Changes detected in:"
          echo "$CHANGES"
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "No changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate Environment Variables
      if: steps.check_frontend_changes.outputs.changes == 'true'
      run: |
        for var in ENVIRONMENT DB_PASSWORD POSTGRES_PASSWORD API_SECRET_KEY API_MASTER_KEY; do
          if [ -z "${!var}" ]; then
            echo "Error: $var is not set"
            exit 1
          fi
        done

    - name: Use Node.js
      if: steps.check_frontend_changes.outputs.changes == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache Next.js build
      if: steps.check_frontend_changes.outputs.changes == 'true'
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
          node_modules
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies and build
      if: steps.check_frontend_changes.outputs.changes == 'true'
      run: |
        npm ci
        npm run lint
        npm run build

    - name: Setup PM2 Ecosystem Configuration
      run: |
          # Copy PM2 ecosystem configuration to deployment directory
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S cp ./scripts/ecosystem.config.js /opt/thebarcodeapi/${ENVIRONMENT}/
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/${ENVIRONMENT}
          
          # Create logs directory for PM2
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/logs
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/${ENVIRONMENT}/logs

    - name: Deploy Frontend using Script
      env:
        ENVIRONMENT: ${{ env.ENVIRONMENT }}
        SUDO_PASSWORD: ${{ env.SUDO_PASSWORD }}
      run: |
          # Make deployment script executable
          chmod +x ./scripts/deploy-frontend.sh
          
          # Run deployment script with changes flag
          ./scripts/deploy-frontend.sh "${{ steps.check_frontend_changes.outputs.changes }}"

  backend-deployment:
    runs-on: self-hosted
    needs: frontend-deployment
    steps:
    - name: Determine branch
      id: get_branch
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "branch=${{ github.ref }}" >> $GITHUB_OUTPUT
        else
          echo "branch=main" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Get all commits
        ref: ${{ steps.get_branch.outputs.branch }}

    - name: Check for backend changes
      id: check_backend_changes
      run: |
        # Debug information
        echo "Current directory: $(pwd)"
        echo "Event type: ${{ github.event_name }}"
        echo "Git branch: $(git rev-parse --abbrev-ref HEAD)"

        # Check if this is a first deployment
        if [ ! -d "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data" ]; then
          echo "First deployment detected"
          echo "changes=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual triggers, we'll check the current deployment
          if [ -f "/opt/thebarcodeapi/barcodeAPI/.git-commit" ]; then
            DEPLOYED_COMMIT=$(cat "/opt/thebarcodeapi/barcodeAPI/.git-commit")
            echo "Found deployed commit: ${DEPLOYED_COMMIT}"

            # Verify the commit exists in git history
            if git rev-parse --verify "${DEPLOYED_COMMIT}^{commit}" >/dev/null 2>&1; then
              echo "Comparing changes with deployed commit ${DEPLOYED_COMMIT}"
                CHANGES=$(git diff --name-only "${DEPLOYED_COMMIT}" HEAD -- \
                'api/' \
                'alembic/' \
                'requirements.txt' \
                'Dockerfile' \
                '*.yml' \
                '*.ini' \
                'scripts/' \
                '*.sh' \
                '.github/workflows/' \
                || true)
              else
              echo "Deployed commit ${DEPLOYED_COMMIT} not found in history, forcing update"
              CHANGES="force_update"
            fi
          else
            echo "No .git-commit file found in current deployment, forcing update"
            CHANGES="force_update"
          fi
        else
          # For automated triggers, compare with previous commit
          echo "Comparing with previous commit"
          CHANGES=$(git diff --name-only HEAD^ HEAD -- \
            'api/' \
            'alembic/' \
            'requirements.txt' \
            'Dockerfile' \
            '*.yml' \
            '*.ini' \
            'scripts/' \
            '*.sh' \
            || true)
        fi

        if [ ! -z "$CHANGES" ]; then
          echo "Backend changes detected:"
          echo "$CHANGES"
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "No backend changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

        # Debug output
        echo "Git diff output:"
        git diff --name-only HEAD^ HEAD || true

    - name: Clean and copy backend files
      if: steps.check_backend_changes.outputs.changes == 'true'
      run: |
        # Create backup of current deployment if it exists
        if [ -d "/opt/thebarcodeapi/barcodeAPI" ]; then
          BACKUP_DIR="/opt/thebarcodeapi/${{ vars.ENVIRONMENT }}/backups/$(date +%Y%m%d_%H%M%S)"
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "${BACKUP_DIR}"
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S cp -r /opt/thebarcodeapi/barcodeAPI "${BACKUP_DIR}/"
        fi

        # Clean the deployment directory
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -rf /opt/thebarcodeapi/barcodeAPI/*

        # Copy new files
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cp -r ./barcodeAPI/* /opt/thebarcodeapi/barcodeAPI/

        # Set proper permissions
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod -R 755 /opt/thebarcodeapi/barcodeAPI

        # Debug output
        echo "Contents of deployment directory:"
        ls -la /opt/thebarcodeapi/barcodeAPI/

    - name: Create .env file for backend
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /opt/thebarcodeapi/barcodeAPI/.env << EOF
        API_VERSION=${{ vars.API_VERSION }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REDIS_URL=redis://redis:6379/1
        SYNC_DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        LOG_DIRECTORY=/app
        ROOT_PATH=/api/v1
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        SECRET_KEY=${{ env.API_SECRET_KEY }}
        MASTER_API_KEY=${{ env.API_MASTER_KEY }}
        DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        EOF'

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data /opt/thebarcodeapi/barcodeAPI/.env
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

        # Verify .env file was created and has content
        echo "Verifying .env file:"
        if [ -f "/opt/thebarcodeapi/barcodeAPI/.env" ]; then
          echo "File exists"
          echo "File permissions:"
          ls -l /opt/thebarcodeapi/barcodeAPI/.env
          echo "File contents:"
          cat /opt/thebarcodeapi/barcodeAPI/.env
        else
          echo "ERROR: .env file not created!"
          exit 1
        fi

    - name: Set up Docker Buildx
      if: steps.check_backend_changes.outputs.changes == 'true'
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Setup build cache
      if: steps.check_backend_changes.outputs.changes == 'true'
      uses: actions/cache@v3
      with:
        path: |
          /opt/thebarcodeapi/barcodeAPI/.buildx-cache
          ~/.docker/buildx
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ hashFiles('**/requirements.txt', '**/Dockerfile', 'api/**/*.py', 'alembic/**/*.py') }}
          ${{ runner.os }}-buildx-${{ github.ref_name }}-

    - name: Build and cache Docker image
      if: steps.check_backend_changes.outputs.changes == 'true'
      uses: docker/build-push-action@v5
      with:
        context: /opt/thebarcodeapi/barcodeAPI
        file: /opt/thebarcodeapi/barcodeAPI/Dockerfile
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=local,src=/opt/thebarcodeapi/barcodeAPI/.buildx-cache
          type=gha,scope=${{ github.workflow }}
        cache-to: type=local,dest=/opt/thebarcodeapi/barcodeAPI/.buildx-cache-new,mode=min
        build-args: |
          DEBIAN_FRONTEND=noninteractive
          PYTHON_ENV=${{ env.ENVIRONMENT }}
        platforms: linux/amd64
        outputs: type=docker
        provenance: false
        sbom: false

    - name: Move cache
      if: steps.check_backend_changes.outputs.changes == 'true'
      run: |
        rm -rf /opt/thebarcodeapi/barcodeAPI/.buildx-cache
        mv /opt/thebarcodeapi/barcodeAPI/.buildx-cache-new /opt/thebarcodeapi/barcodeAPI/.buildx-cache

    - name: Store Git commit hash
      if: steps.check_backend_changes.outputs.changes == 'true'
      run: |
        git rev-parse HEAD > .git-commit
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cp .git-commit /opt/thebarcodeapi/barcodeAPI/

    - name: Setup Initial Directories
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/backups/
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/barcodeAPI

    - name: Setup Docker and Environment
      run: |
        # Fix docker socket permissions
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 666 /var/run/docker.sock

        # Add runner to docker group if not already added
        if ! groups | grep -q docker; then
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S usermod -aG docker $USER
          # Reload groups without logging out
          exec sg docker newgrp docker
        fi

        # Create env_vars file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /tmp/env_vars << 'EOF'
        ENVIRONMENT=production
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        API_SECRET_KEY=${{ env.API_SECRET_KEY }}
        API_MASTER_KEY=${{ env.API_MASTER_KEY }}
        API_VERSION=${{ vars.API_VERSION }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REDIS_URL=redis://redis:6379/1
        SYNC_DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        LOG_DIRECTORY=/app
        ROOT_PATH=/api/v1
        SECRET_KEY=${{ env.API_SECRET_KEY }}
        MASTER_API_KEY=${{ env.API_MASTER_KEY }}
        DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        EOF"

        # Determine and set docker compose command
        if command -v docker-compose &> /dev/null; then
            echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'echo "DOCKER_COMPOSE=docker-compose" > /tmp/docker_vars'
        elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
            echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'echo "DOCKER_COMPOSE=docker compose" > /tmp/docker_vars'
        else
            echo "Neither docker-compose nor docker compose found!"
            exit 1
        fi

        # Debug output
        echo "Environment file contents:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cat /tmp/env_vars
        echo "Docker compose file contents:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cat /tmp/docker_vars

        # Verify Docker access
        docker ps

    - name: Create and run backend deployment script
      env:
        CHANGES: ${{ steps.check_backend_changes.outputs.changes }}
      run: |
        # Create deployment script
        cat > deploy_backend.sh << 'EOF'
        #!/bin/bash
        set -e

        # Source environment variables
        if [ ! -f "/tmp/env_vars" ]; then
            echo "Error: /tmp/env_vars not found"
            exit 1
        fi
        source /tmp/env_vars

        # Source docker compose command
        if [ ! -f "/tmp/docker_vars" ]; then
            echo "Error: /tmp/docker_vars not found"
            exit 1
        fi
        source /tmp/docker_vars

        cd /opt/thebarcodeapi/barcodeAPI

        echo "Starting backend deployment..."
        echo "Using DOCKER_COMPOSE command: ${DOCKER_COMPOSE}"

        # If no changes detected, just check health and exit
        if [ "$CHANGES" == "false" ]; then
          echo "No changes detected in backend files. Verifying health only..."

          # Check if services are running
          if ! $DOCKER_COMPOSE ps | grep -q "Up"; then
            echo "Services are not running, starting them..."
            $DOCKER_COMPOSE up -d
          fi

          # Verify health
          for service in "db" "redis" "api"; do
            timeout 300 bash -c "until $DOCKER_COMPOSE ps $service 2>/dev/null | grep -q 'healthy'; do
              echo 'Waiting for $service to become healthy...'
              sleep 5
            done"
          done

          echo "Backend health verified"
          exit 0
        fi

        # Create backup directory
        BACKUP_DIR="/opt/thebarcodeapi/${ENVIRONMENT}/backups/$(date +%Y%m%d_%H%M%S)"
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "${BACKUP_DIR}"
        echo "$SUDO_PASSWORD" | sudo -S chown -R $USER:$USER "${BACKUP_DIR}"

        # Function to safely backup PostgreSQL
        backup_postgres() {
            echo "Attempting PostgreSQL backup..."
            if $DOCKER_COMPOSE ps 2>/dev/null | grep -q "db"; then
                if $DOCKER_COMPOSE exec -T db pg_isready -U postgres > /dev/null 2>&1; then
                    echo "PostgreSQL is ready, creating backup..."
                    $DOCKER_COMPOSE exec -T db pg_dumpall -U postgres > "${BACKUP_DIR}/postgres_backup.sql" || {
                        echo "Failed to create backup"
                        return 1
                    }
                    echo "PostgreSQL backup completed successfully"
                    return 0
                fi
            fi
            echo "No existing PostgreSQL container or not ready, skipping backup"
            return 0
        }

        # Function to safely backup Redis
        backup_redis() {
            echo "Attempting Redis backup..."
            if $DOCKER_COMPOSE ps 2>/dev/null | grep -q "redis"; then
                if $DOCKER_COMPOSE exec -T redis redis-cli ping | grep -q "PONG"; then
                    echo "Redis is ready, creating backup..."
                    $DOCKER_COMPOSE exec -T redis redis-cli SAVE || {
                        echo "Failed to save Redis dump"
                        return 1
                    }

                    REDIS_ID=$($DOCKER_COMPOSE ps -q redis)
                    if [ ! -z "$REDIS_ID" ]; then
                        docker cp "${REDIS_ID}:/data/dump.rdb" "${BACKUP_DIR}/redis_dump.rdb" || {
                            echo "Failed to copy Redis dump"
                            return 1
                        }
                    else
                        echo "Could not find Redis container"
                        return 1
                    fi

                    echo "Redis backup completed successfully"
                    return 0
                fi
            fi
            echo "No existing Redis container or not ready, skipping backup"
            return 0
        }

        # Perform backups
        echo "Checking for existing containers to backup..."
        backup_postgres || echo "Note: PostgreSQL backup skipped"
        backup_redis || echo "Note: Redis backup skipped"

        # Store current container IDs
        OLD_CONTAINERS=$($DOCKER_COMPOSE ps -q 2>/dev/null || echo "")

        # Stop current containers
        echo "Stopping current containers..."
        $DOCKER_COMPOSE down || true

        # Preserve existing data
        if [ -d "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres" ]; then
            echo "Preserving PostgreSQL data..."
            echo "$SUDO_PASSWORD" | sudo -S cp -R /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres "${BACKUP_DIR}/postgres_data"
        fi

        if [ -d "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis" ]; then
            echo "Preserving Redis data..."
            echo "$SUDO_PASSWORD" | sudo -S cp -R /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis "${BACKUP_DIR}/redis_data"
        fi

        # Set up data directories
        echo "Setting up data directories..."
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "$SUDO_PASSWORD" | sudo -S chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 700 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 755 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis

        sudo chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        sudo chmod -R 700 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        sudo chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        sudo chmod -R 755 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis

        # Use cached image if available
        if docker image inspect barcodeapi:latest >/dev/null 2>&1; then
          echo "Using cached image"
          $DOCKER_COMPOSE up -d
        else
          echo "Building fresh image"
          $DOCKER_COMPOSE build --no-cache api
          $DOCKER_COMPOSE up -d
        fi

        # Check container health
        check_container_health() {
            local container=$1
            local timeout=$2
            local start_time=$(date +%s)
            local end_time=$((start_time + timeout))

            while [ $(date +%s) -lt $end_time ]; do
                if $DOCKER_COMPOSE ps $container 2>/dev/null | grep -q "healthy"; then
                    echo "$container is healthy"
                    return 0
                fi
                echo "Waiting for $container to become healthy..."
                sleep 5
            done

            echo "$container failed to become healthy within $timeout seconds"
            return 1
        }

        # Check all services
        for service in "db" "redis" "api"; do
            if ! check_container_health "$service" 300; then
                echo "Service $service failed health check"
                $DOCKER_COMPOSE logs $service
                exit 1
            fi
        done

        echo "Backend deployment completed successfully"
        EOF

        # Make script executable
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x deploy_backend.sh

        # Run deployment script
        ./deploy_backend.sh

    - name: Verify deployment
      run: |
        # Check container status
        docker ps | grep -E "barcodeapi_(api|db|redis)"

        # Check API health
        curl -f http://localhost:8000/health || {
            echo "API health check failed."
            docker logs barcodeapi_api
            exit 1
        }

    - name: Run Database Migrations
      run: |
        cd /opt/thebarcodeapi/barcodeAPI

        # Determine docker compose command
        if command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
        else
          COMPOSE_CMD="docker compose"
        fi

        echo "Using compose command: $COMPOSE_CMD"

        # Set proper permissions
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data /opt/thebarcodeapi/barcodeAPI/.env
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

        # Run migrations
        echo "Running migrations..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD exec -T api alembic upgrade head

        # Check migration status
        MIGRATION_STATUS=$?
        if [ $MIGRATION_STATUS -eq 0 ]; then
          echo "Database migrations completed successfully"
        else
          echo "Migration failed! Checking logs..."
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs api
        fi

        # Exit with migration status
        exit $MIGRATION_STATUS

    - name: Verify Backend Deployment
      run: |
        cd /opt/thebarcodeapi/barcodeAPI

        # Determine docker compose command
        if command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
        else
          COMPOSE_CMD="docker compose"
        fi

        # Set proper permissions
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown github-runner:github-runner /opt/thebarcodeapi/barcodeAPI/.env
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

        echo "Verifying backend deployment..."

        echo "Checking Docker containers status:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD ps

        echo "Checking container logs (last 10 lines):"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs --tail=10

        echo "Testing backend health:"
        MAX_RETRIES=3
        RETRY_COUNT=0
        until curl -f http://localhost:8000/health || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          echo "Backend health check failed, retrying in 5 seconds..."
          sleep 5
          RETRY_COUNT=$((RETRY_COUNT + 1))
        done

        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Backend health check failed after $MAX_RETRIES attempts"
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs api
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env
          exit 1
        fi

        echo "Backend verification completed successfully"

        # Cleanup
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env

    - name: Clean up
      if: always()
      run: |
        cd /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S docker system prune -f --volumes

    - name: Final cleanup
      if: always()
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env

    - name: Final Status Check
      run: |
        echo "Performing final status check..."

        # Check app containers
        if ! docker ps | grep -q "barcodeapi_api"; then
          echo "API container is not running!"
          exit 1
        fi

        # Check Redis
        if ! docker ps | grep -q "barcodeapi_redis"; then
          echo "Redis container is not running!"
          exit 1
        fi

        # Check Database
        if ! docker ps | grep -q "barcodeapi_db"; then
          echo "Database container is not running!"
          exit 1
        fi

        # Check API health
        if ! curl -s -f http://localhost:8000/health > /dev/null; then
          echo "API health check failed!"
          exit 1
        fi

        echo "All services are running correctly!"

  final-verification:
    runs-on: self-hosted
    needs: [frontend-deployment, backend-deployment]
    steps:

    - name: Clean up build artifacts
      if: always()
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -rf .next
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -rf build
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f package.json package-lock.json
        # Clean docker unused resources
        docker system prune -f --volumes

    - name: Notify on failure
      if: failure()
      run: |
        echo "============================================"
        echo "Deployment failed! Collecting diagnostic information..."
        echo "============================================"

        echo "PM2 Status:"
        pm2 list || true

        echo "Docker Container Status:"
        docker ps -a || true

        echo "Recent Docker Logs:"
        docker-compose -f /opt/thebarcodeapi/barcodeAPI/docker-compose.yml logs --tail=50 || true

        echo "Nginx Status:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S systemctl status nginx || true

        echo "Cleaning up temporary files..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/env_vars
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/docker_vars
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env

        echo "============================================"
        # exit 1