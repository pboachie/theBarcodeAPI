name: theBarcodeApi Application Deployment

on:
  workflow_run:
    workflows: ["theBarcodeApi Infrastructure Setup"]
    types:
      - completed
  workflow_dispatch:

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}

jobs:
  application-cd-job:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Install dependencies
      run:  |
        npm ci

    - name: Run linter
      run: npm run lint

    - name: Build
      run: npm run build

    - name: Create deployment script
      run: |
        cat << 'EOF' > deploy.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/nginx_env_vars

        echo "Starting deployment..."

        # Create directories
        mkdir -p /opt/thebarcodeapi/$ENVIRONMENT/releases
        NEW_RELEASE="/opt/thebarcodeapi/$ENVIRONMENT/releases/release-$(date +%Y%m%d%H%M%S)"
        echo "Creating new release directory: $NEW_RELEASE"
        mkdir -p "$NEW_RELEASE"

        # Copy Next.js build files
        echo "Copying build files to new release directory"
        cp -R /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/.next "$NEW_RELEASE/"
        cp -R /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/public "$NEW_RELEASE/"
        cp /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/package.json "$NEW_RELEASE/"
        cp /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/package-lock.json "$NEW_RELEASE/"

        # Change to the new release directory
        cd "$NEW_RELEASE"

        # Install production dependencies
        npm ci --only=production --omit=dev

        # Get the version from package.json
        VERSION=$(node -p "require('./package.json').version")

        # Update symlink
        echo "Creating symlink to new release"
        ln -sfn "$NEW_RELEASE" /opt/thebarcodeapi/$ENVIRONMENT/current

        # Clean up old releases
        echo "Cleaning up old releases"
        cd /opt/thebarcodeapi/$ENVIRONMENT/releases && ls -1dt */ | tail -n +6 | xargs rm -rf

        echo "Starting/Restarting PM2 process with version $VERSION"
        if pm2 list | grep -q "thebarcodeapi-$ENVIRONMENT"; then
          pm2 reload "thebarcodeapi-$ENVIRONMENT" --update-env
        else
          pm2 start npm --name "thebarcodeapi-$ENVIRONMENT" -- start
        fi

        # Update the process with the version
        pm2 set "thebarcodeapi-$ENVIRONMENT:APP_VERSION" $VERSION

        # Save the new PM2 process list
        pm2 save

        echo "PM2 process started/restarted with version $VERSION"

        # Reload Nginx
        # echo "Reloading nginx"
        # systemctl reload nginx

        # Set permissions
        echo "Changing ownership of /opt/thebarcodeapi"
        chown -R www-data:www-data /opt/thebarcodeapi

        # Clean up
        rm /tmp/nginx_env_vars

        echo "Deployment completed"
        EOF
        chmod +x deploy.sh

    - name: Deploy
      run: |
        # Create a temporary file with environment variables
        echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" > /tmp/nginx_env_vars
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> /tmp/nginx_env_vars

        # Run deployment script
        echo ${{ env.SUDO_PASSWORD }} | sudo -S ./deploy.sh

        # Clean up (in case the script didn't run to completion)
        rm -f /tmp/nginx_env_vars

    - name: Create verification script
      run: |
        cat << 'EOF' > verify_deployment.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/nginx_env_vars

        echo "Verifying deployment..."
        echo "Checking /opt/thebarcodeapi/$ENVIRONMENT/current:"
        ls -la /opt/thebarcodeapi/$ENVIRONMENT/current

        echo "Checking Next.js application status:"
        pm2 list | grep thebarcodeapi-$ENVIRONMENT

        # echo "Checking Nginx status:"
        # systemctl status nginx

        # Clean up
        rm /tmp/nginx_env_vars

        echo "Verification completed"
        EOF
        chmod +x verify_deployment.sh

    - name: Verify Deployment
      run: |
        # Create a temporary file with environment variables
        echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" > /tmp/nginx_env_vars
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> /tmp/nginx_env_vars

        # Run verification script
        echo ${{ env.SUDO_PASSWORD }} | sudo -S ./verify_deployment.sh

        # Clean up (in case the script didn't run to completion)
        rm -f /tmp/nginx_env_vars

    - name: Clean up build artifacts
      run: |
        rm -rf .next
        rm -rf build
        rm package.json
        rm package-lock.json