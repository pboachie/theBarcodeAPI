name: theBarcodeApi Application Deployment

on:
  workflow_run:
    workflows: ["theBarcodeApi Infrastructure Setup"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
  API_MASTER_KEY: ${{ secrets.API_MASTER_KEY }}

jobs:
  frontend-deployment:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
    - uses: actions/checkout@v3

    - name: Validate Environment Variables
      run: |
        for var in ENVIRONMENT DB_PASSWORD POSTGRES_PASSWORD API_SECRET_KEY API_MASTER_KEY; do
          if [ -z "${!var}" ]; then
            echo "Error: $var is not set"
            exit 1
          fi
        done

    - name: Verify Working Directory
      run: |
        cd /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI
        if [ ! -f "package.json" ]; then
          echo "Error: package.json not found!"
          exit 1
        fi

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build
      run: npm run build

    - name: Deploy Frontend
      run: |
        # Create env vars file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /tmp/env_vars << EOF
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        NODE_ENV=production
        SUDO_PASSWORD=${{ env.SUDO_PASSWORD }}
        EOF'

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 600 /tmp/env_vars
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown github-runner:github-runner /tmp/env_vars

        # Create deployment script
        cat > deploy_frontend.sh << 'EOF'
        #!/bin/bash
        set -e

        if [ ! -f "/tmp/env_vars" ]; then
            echo "Error: /tmp/env_vars not found"
            exit 1
        fi

        source /tmp/env_vars

        echo "Starting frontend deployment..."

        # Create base directories first
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}"
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}/releases"

        # Set initial permissions
        echo "$SUDO_PASSWORD" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi

        # Create new release directory
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        NEW_RELEASE="/opt/thebarcodeapi/${ENVIRONMENT}/releases/release-${TIMESTAMP}"
        echo "Creating new release directory: $NEW_RELEASE"
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "$NEW_RELEASE"
        echo "$SUDO_PASSWORD" | sudo -S chown -R github-runner:github-runner "$NEW_RELEASE"

        # Verify source files exist
        pwd
        ls -la
        if [ ! -d "./.next" ]; then
            echo "Error: .next directory not found!"
            exit 1
        fi

        # Copy build files
        echo "Copying build files to new release directory"
        echo "$SUDO_PASSWORD" | sudo -S cp -R ./.next "$NEW_RELEASE/"
        echo "$SUDO_PASSWORD" | sudo -S cp -R ./public "$NEW_RELEASE/"
        echo "$SUDO_PASSWORD" | sudo -S cp ./package.json "$NEW_RELEASE/"
        echo "$SUDO_PASSWORD" | sudo -S cp ./package-lock.json "$NEW_RELEASE/"

        # Change to new release directory
        cd "$NEW_RELEASE"

        # Install production dependencies
        npm ci --omit=dev

        # Create and verify current directory exists
        CURRENT_DIR="/opt/thebarcodeapi/${ENVIRONMENT}/current"
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "$(dirname "$CURRENT_DIR")"

        # Update symlink
        echo "Creating symlink to new release"
        echo "Source: $NEW_RELEASE"
        echo "Target: $CURRENT_DIR"
        echo "$SUDO_PASSWORD" | sudo -S ln -sfn "$NEW_RELEASE" "$CURRENT_DIR"

        # Verify symlink creation
        if [ ! -L "$CURRENT_DIR" ]; then
            echo "Error: Failed to create symlink"
            exit 1
        fi

        # Clean up old releases
        echo "Cleaning up old releases"
        cd "/opt/thebarcodeapi/${ENVIRONMENT}/releases"
        OLD_RELEASES=$(ls -1dt */ | tail -n +6)
        if [ ! -z "$OLD_RELEASES" ]; then
            echo "$SUDO_PASSWORD" | sudo -S rm -rf $OLD_RELEASES
        fi

        # Manage PM2 process
        echo "Managing PM2 process..."
        if pm2 list | grep -q "thebarcodeapi-frontend-${ENVIRONMENT}"; then
            PM2_HOME="/home/github-runner/.pm2" pm2 restart "thebarcodeapi-frontend-${ENVIRONMENT}" || true
        fi

        cd "$CURRENT_DIR"

        # Set final permissions
        echo "$SUDO_PASSWORD" | sudo -S chown -R www-data:www-data "/opt/thebarcodeapi/${ENVIRONMENT}"
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 755 "/opt/thebarcodeapi/${ENVIRONMENT}"

        echo "Frontend deployment completed"
        EOF

        # Make the script executable
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x deploy_frontend.sh

        # Run the deployment script
        ./deploy_frontend.sh

        # Cleanup
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/env_vars

    - name: Verify Frontend Deployment
      run: |
        cat << 'EOF' > verify_frontend.sh
        #!/bin/bash
        # verify_frontend.sh
        set -e

        if [ ! -f "/tmp/env_vars" ]; then
            echo "Error: /tmp/env_vars not found"
            exit 1
        fi

        source /tmp/env_vars

        echo "Verifying frontend deployment..."

        # Check current symlink
        echo "Checking current symlink:"
        ls -la "/opt/thebarcodeapi/${ENVIRONMENT}/current"

        # Check PM2 process status
        echo "Checking Next.js application status:"
        pm2 list | grep "thebarcodeapi-frontend-${ENVIRONMENT}" || {
            echo "ERROR: PM2 process not found!"
            exit 1
        }

        # Function to test frontend health with timeout and retries
        check_frontend_health() {
            local max_attempts=12  # 1 minute total (5s * 12)
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
                echo "Health check attempt $attempt of $max_attempts..."
                if curl -s -f "http://localhost:3000/" > /dev/null; then
                    echo "Frontend is responding successfully!"
                    return 0
                fi
                echo "Frontend not ready yet, waiting 5 seconds..."
                sleep 5
                attempt=$((attempt + 1))
            done

            echo "ERROR: Frontend failed to respond after 1 minute"
            return 1
        }

        echo "Testing frontend health..."
        if ! check_frontend_health; then
            echo "DEPLOYMENT VERIFICATION FAILED"
            echo "Recent PM2 logs:"
            pm2 logs "thebarcodeapi-frontend-${ENVIRONMENT}" --lines 50
            exit 1
        fi

        echo "Frontend verification completed successfully"
        EOF
        chmod +x verify_frontend.sh

        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" > /tmp/env_vars
        ./verify_frontend.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/env_vars

  backend-deployment:
    runs-on: self-hosted
    needs: frontend-deployment
    steps:
    - uses: actions/checkout@v3

    - name: Validate Environment Variables
      run: |
        for var in ENVIRONMENT DB_PASSWORD POSTGRES_PASSWORD API_SECRET_KEY API_MASTER_KEY; do
          if [ -z "${!var}" ]; then
            echo "Error: $var is not set"
            exit 1
          fi
        done

    - name: Setup Initial Directories
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/backups/
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/barcodeAPI

    - name: Setup Docker and Environment
      run: |
        # Fix docker socket permissions
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 666 /var/run/docker.sock

        # Add runner to docker group if not already added
        if ! groups | grep -q docker; then
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S usermod -aG docker $USER
          # Reload groups without logging out
          exec sg docker newgrp docker
        fi

        # Create env_vars file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /tmp/env_vars << 'EOF'
        ENVIRONMENT=production
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        API_SECRET_KEY=${{ env.API_SECRET_KEY }}
        API_MASTER_KEY=${{ env.API_MASTER_KEY }}
        API_VERSION=${{ vars.API_VERSION }}
        EOF"

        # Determine and set docker compose command
        if command -v docker-compose &> /dev/null; then
            echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'echo "DOCKER_COMPOSE=docker-compose" > /tmp/docker_vars'
        elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
            echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'echo "DOCKER_COMPOSE=docker compose" > /tmp/docker_vars'
        else
            echo "Neither docker-compose nor docker compose found!"
            exit 1
        fi

        # Debug output
        echo "Environment file contents:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cat /tmp/env_vars
        echo "Docker compose file contents:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S cat /tmp/docker_vars

        # Verify Docker access
        docker ps

    - name: Create .env file for backend
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat << EOF > /opt/thebarcodeapi/barcodeAPI/.env
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        SECRET_KEY=${{ env.API_SECRET_KEY }}
        MASTER_API_KEY=${{ env.API_MASTER_KEY }}
        API_VERSION=${{ vars.API_VERSION }}
        DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        REDIS_URL=redis://redis:6379
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        EOF'
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data /opt/thebarcodeapi/barcodeAPI/.env
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

    - name: Create and run backend deployment script
      run: |
        # Create deployment script
        cat > deploy_backend.sh << 'EOF'
        #!/bin/bash
        set -e

        # Source environment variables
        if [ ! -f "/tmp/env_vars" ]; then
            echo "Error: /tmp/env_vars not found"
            exit 1
        fi
        source /tmp/env_vars

        # Source docker compose command
        if [ ! -f "/tmp/docker_vars" ]; then
            echo "Error: /tmp/docker_vars not found"
            exit 1
        fi
        source /tmp/docker_vars

        cd /opt/thebarcodeapi/barcodeAPI

        # # Create temporary env file
        # echo "Creating temporary environment file..."
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat << EOF > /opt/thebarcodeapi/barcodeAPI/.env
        # DB_PASSWORD=${DB_PASSWORD}
        # POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        # SECRET_KEY=${API_SECRET_KEY}
        # MASTER_API_KEY=${API_MASTER_KEY}
        # API_VERSION=${API_VERSION:-v1}
        # DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${DB_PASSWORD}@db/barcode_api
        # REDIS_URL=redis://redis:6379
        # ALGORITHM=HS256
        # ACCESS_TOKEN_EXPIRE_MINUTES=30
        # EOF'

        echo "Starting backend deployment..."
        echo "Using DOCKER_COMPOSE command: ${DOCKER_COMPOSE}"

        # Create backup directory
        BACKUP_DIR="/opt/thebarcodeapi/backups/${ENVIRONMENT:-production}/$(date +%Y%m%d_%H%M%S)"
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p "${BACKUP_DIR}"
        echo "$SUDO_PASSWORD" | sudo -S chown -R $USER:$USER "${BACKUP_DIR}"

        # Function to safely backup PostgreSQL
        backup_postgres() {
            echo "Attempting PostgreSQL backup..."
            if $DOCKER_COMPOSE ps 2>/dev/null | grep -q "db"; then
                if $DOCKER_COMPOSE exec -T db pg_isready -U postgres > /dev/null 2>&1; then
                    echo "PostgreSQL is ready, creating backup..."
                    $DOCKER_COMPOSE exec -T db pg_dumpall -U postgres > "${BACKUP_DIR}/postgres_backup.sql" || {
                        echo "Failed to create backup"
                        return 1
                    }
                    echo "PostgreSQL backup completed successfully"
                    return 0
                fi
            fi
            echo "No existing PostgreSQL container or not ready, skipping backup"
            return 0
        }

        # Function to safely backup Redis
        backup_redis() {
            echo "Attempting Redis backup..."
            if $DOCKER_COMPOSE ps 2>/dev/null | grep -q "redis"; then
                if $DOCKER_COMPOSE exec -T redis redis-cli ping | grep -q "PONG"; then
                    echo "Redis is ready, creating backup..."
                    $DOCKER_COMPOSE exec -T redis redis-cli SAVE || {
                        echo "Failed to save Redis dump"
                        return 1
                    }

                    REDIS_ID=$($DOCKER_COMPOSE ps -q redis)
                    if [ ! -z "$REDIS_ID" ]; then
                        docker cp "${REDIS_ID}:/data/dump.rdb" "${BACKUP_DIR}/redis_dump.rdb" || {
                            echo "Failed to copy Redis dump"
                            return 1
                        }
                    else
                        echo "Could not find Redis container"
                        return 1
                    fi

                    echo "Redis backup completed successfully"
                    return 0
                fi
            fi
            echo "No existing Redis container or not ready, skipping backup"
            return 0
        }

        # Perform backups
        echo "Checking for existing containers to backup..."
        backup_postgres || echo "Note: PostgreSQL backup skipped"
        backup_redis || echo "Note: Redis backup skipped"

        # Store current container IDs
        OLD_CONTAINERS=$($DOCKER_COMPOSE ps -q 2>/dev/null || echo "")

        # Stop current containers
        echo "Stopping current containers..."
        $DOCKER_COMPOSE down || true

        # Preserve existing data
        if [ -d "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres" ]; then
            echo "Preserving PostgreSQL data..."
            echo "$SUDO_PASSWORD" | sudo -S cp -R /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres "${BACKUP_DIR}/postgres_data"
        fi

        if [ -d "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis" ]; then
            echo "Preserving Redis data..."
            echo "$SUDO_PASSWORD" | sudo -S cp -R /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis "${BACKUP_DIR}/redis_data"
        fi

        # Set up data directories
        echo "Setting up data directories..."
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "$SUDO_PASSWORD" | sudo -S chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 700 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        echo "$SUDO_PASSWORD" | sudo -S chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 755 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis

        sudo chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        sudo chmod -R 700 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres
        sudo chown -R 999:999 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        sudo chmod -R 755 /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis


        # Build and start containers
        echo "Building and starting containers..."
        $DOCKER_COMPOSE build --no-cache api
        $DOCKER_COMPOSE up -d

        # Check container health
        check_container_health() {
            local container=$1
            local timeout=$2
            local start_time=$(date +%s)
            local end_time=$((start_time + timeout))

            while [ $(date +%s) -lt $end_time ]; do
                if $DOCKER_COMPOSE ps $container 2>/dev/null | grep -q "healthy"; then
                    echo "$container is healthy"
                    return 0
                fi
                echo "Waiting for $container to become healthy..."
                sleep 5
            done

            echo "$container failed to become healthy within $timeout seconds"
            return 1
        }

        # Check all services
        for service in "db" "redis" "api"; do
            if ! check_container_health "$service" 300; then
                echo "Service $service failed health check"
                $DOCKER_COMPOSE logs $service
                exit 1
            fi
        done

        echo "Backend deployment completed successfully"
        EOF

        # Make script executable
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x deploy_backend.sh

        # Run deployment script
        ./deploy_backend.sh

    - name: Verify deployment
      run: |
        # Check container status
        docker ps | grep -E "barcodeapi_(api|db|redis)"

        # Check API health
        curl -f http://localhost:8000/health || {
            echo "API health check failed"
            docker logs barcodeapi_api
            exit 1
        }

    - name: Run Database Migrations
      run: |
        cd /opt/thebarcodeapi/barcodeAPI

        # Determine docker compose command
        if command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
        else
          COMPOSE_CMD="docker compose"
        fi

        echo "Using compose command: $COMPOSE_CMD"

        # Set proper permissions
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data /opt/thebarcodeapi/barcodeAPI/.env
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

        # Run migrations
        echo "Running migrations..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD exec -T api alembic upgrade head

        # Check migration status
        MIGRATION_STATUS=$?
        if [ $MIGRATION_STATUS -eq 0 ]; then
          echo "Database migrations completed successfully"
        else
          echo "Migration failed! Checking logs..."
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs api
        fi

        # Exit with migration status
        exit $MIGRATION_STATUS

    - name: Verify Backend Deployment
      run: |
        cd /opt/thebarcodeapi/barcodeAPI

        # Determine docker compose command
        if command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
        else
          COMPOSE_CMD="docker compose"
        fi

        # Create temporary env file with sudo
        # echo "Creating temporary environment file..."
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat << EOF > /opt/thebarcodeapi/barcodeAPI/.env
        # DB_PASSWORD=${{ env.DB_PASSWORD }}
        # POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        # SECRET_KEY=${{ env.API_SECRET_KEY }}
        # MASTER_API_KEY=${{ env.API_MASTER_KEY }}
        # API_VERSION=${{ vars.API_VERSION }}
        # DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${{ env.DB_PASSWORD }}@db/barcode_api
        # REDIS_URL=redis://redis:6379
        # ALGORITHM=HS256
        # ACCESS_TOKEN_EXPIRE_MINUTES=30
        # EOF'

        # Set proper permissions
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data /opt/thebarcodeapi/barcodeAPI/.env
        # echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 644 /opt/thebarcodeapi/barcodeAPI/.env

        echo "Verifying backend deployment..."

        echo "Checking Docker containers status:"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD ps

        echo "Checking container logs (last 10 lines):"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs --tail=10

        echo "Testing backend health:"
        MAX_RETRIES=3
        RETRY_COUNT=0
        until curl -f http://localhost:8000/health || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
          echo "Backend health check failed, retrying in 5 seconds..."
          sleep 5
          RETRY_COUNT=$((RETRY_COUNT + 1))
        done

        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Backend health check failed after $MAX_RETRIES attempts"
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S $COMPOSE_CMD logs api
          echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env
          exit 1
        fi

        echo "Backend verification completed successfully"

        # Cleanup
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env

    - name: Clean up
      if: always()
      run: |
        cd /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f .env
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S docker system prune -f --volumes

    - name: Final Status Check
      run: |
        echo "Performing final status check..."

        # Check app containers
        if ! docker ps | grep -q "barcodeapi_api"; then
          echo "API container is not running!"
          exit 1
        fi

        # Check Redis
        if ! docker ps | grep -q "barcodeapi_redis"; then
          echo "Redis container is not running!"
          exit 1
        fi

        # Check Database
        if ! docker ps | grep -q "barcodeapi_db"; then
          echo "Database container is not running!"
          exit 1
        fi

        # Check API health
        if ! curl -s -f http://localhost:8000/health > /dev/null; then
          echo "API health check failed!"
          exit 1
        fi

        echo "All services are running correctly!"

  final-verification:
    runs-on: self-hosted
    needs: [frontend-deployment, backend-deployment]
    steps:
    - name: Verify Full Deployment
      run: |
        sudo bash -c 'cat << "EOF" > verify_full_deployment.sh
        #!/bin/bash
        set -e

        # Check for Docker Compose and set command
        if command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
        elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
          COMPOSE_CMD="docker compose"
        else
          echo "Error: Docker Compose not found"
          exit 1
        fi

        # Always use composer from the current working directory
        cd /opt/thebarcodeapi/barcodeAPI

        echo "Performing full deployment verification..."

        # Function to check endpoint health with retries
        check_endpoint() {
          local name=$1
          local url=$2
          local max_retries=3
          local retry_count=0
          local wait_time=5

          echo "Checking $name..."
          until curl -f "$url" || [ $retry_count -eq $max_retries ]; do
            echo "$name not responding, retrying in $wait_time seconds..."
            sleep $wait_time
            retry_count=$((retry_count + 1))
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "$name health check failed after $max_retries attempts"
            return 1
          fi
          return 0
        }

        # Check frontend
        check_endpoint "frontend" "http://localhost:3000" || {
          echo "Frontend verification failed"
          pm2 logs thebarcodeapi-frontend-production --lines 50
          exit 1
        }

        # Check backend
        check_endpoint "backend" "http://localhost:8000/health" || {
          echo "Backend verification failed"
          $COMPOSE_CMD logs api --tail 50
          exit 1
        }

        echo "Checking PM2 processes:"
        pm2 list || {
          echo "Error: Failed to list PM2 processes"
          exit 1
        }

        echo "Checking Docker containers:"
        $COMPOSE_CMD -f /opt/thebarcodeapi/barcodeAPI/docker-compose.yml ps || {
          echo "Error: Failed to list Docker containers"
          exit 1
        }

        echo "Verifying Nginx configuration:"
        if ! nginx -t; then
          echo "Error: Nginx configuration test failed"
          exit 1
        fi

        # Verify Nginx is running
        if ! systemctl is-active --quiet nginx; then
          echo "Error: Nginx is not running"
          exit 1
        fi

        echo "Full deployment verification completed successfully"
        EOF'

        chmod +x verify_full_deployment.sh

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./verify_full_deployment.sh

    - name: Clean up build artifacts
      if: always()
      run: |
        rm -rf .next
        rm -rf build
        rm -f package.json package-lock.json
        rm -f verify_full_deployment.sh
        # Clean docker unused resources
        docker system prune -f --volumes

    - name: Notify on failure
      if: failure()
      run: |
        echo "============================================"
        echo "Deployment failed! Collecting diagnostic information..."
        echo "============================================"

        echo "PM2 Status:"
        pm2 list || true

        echo "Docker Container Status:"
        docker ps -a || true

        echo "Recent Docker Logs:"
        docker-compose -f /opt/thebarcodeapi/barcodeAPI/docker-compose.yml logs --tail=50 || true

        echo "Nginx Status:"
        systemctl status nginx || true

        echo "Cleaning up temporary files..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/env_vars
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /tmp/docker_vars
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /opt/thebarcodeapi/barcodeAPI/.env

        echo "============================================"
        exit 1