name: theBarcodeApi Infrastructure Setup

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

jobs:
  infra-ci-job:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create system update script
      run: |
        echo "Creating system update script..."
        cat << 'EOF' > update_system.sh
        #!/bin/bash
        set -e
        echo "Updating system packages..."
        apt-get update
        apt-get upgrade -y
        echo "System update completed."
        EOF
        chmod +x update_system.sh

    - name: Update system
      run: sudo ./update_system.sh
      continue-on-error: true

    - name: Create Nginx installation script
      run: |
        echo "Creating Nginx installation script..."
        cat << 'EOF' > install_nginx.sh
        #!/bin/bash
        set -e
        echo "Installing Nginx..."
        apt-get install -y nginx
        echo "Nginx installation completed."
        EOF
        chmod +x install_nginx.sh

    - name: Install Nginx
      run: sudo ./install_nginx.sh

    - name: Create Nginx configuration script
      run: |
        echo "Creating Nginx configuration script..."
        cat << 'EOF' > nginx_config.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/nginx_env_vars

        echo "Configuring Nginx for $DOMAIN_NAME in $ENVIRONMENT environment..."

        # Create Nginx configuration
        cat > /etc/nginx/sites-available/thebarcodeapi << EOL
        server {
            listen 80;
            listen [::]:80;
            server_name $DOMAIN_NAME www.$DOMAIN_NAME 192.168.1.112;
            server_tokens off;

            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

            # Logging
            access_log /var/log/nginx/thebarcodeapi.access.log;
            error_log /var/log/nginx/thebarcodeapi.error.log warn;

            # Optimize file serving
            location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
                expires 1d;
                add_header Cache-Control "public, no-transform";
            }
        }
        EOL

        echo "Created Nginx configuration file."

        # Create symlink to sites-enabled
        ln -sf /etc/nginx/sites-available/thebarcodeapi /etc/nginx/sites-enabled/
        echo "Created symlink in sites-enabled."

        # Test Nginx configuration
        nginx -t
        echo "Nginx configuration test passed."

        # Reload Nginx
        systemctl reload nginx
        echo "Nginx reloaded successfully."

        echo "Nginx configuration completed."

        # Clean up
        rm /tmp/nginx_env_vars
        EOF
        chmod +x nginx_config.sh

    - name: Configure Nginx
      run: |
        echo "Preparing to run Nginx configuration script..."
        # Create a temporary file with environment variables
        echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" > /tmp/nginx_env_vars
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> /tmp/nginx_env_vars

        echo "Running Nginx configuration script..."
        sudo ./nginx_config.sh

        # Clean up (in case the script didn't run to completion)
        rm -f /tmp/nginx_env_vars

    - name: Create Node.js installation script
      run: |
        echo "Creating Node.js installation script..."
        cat << 'EOF' > install_nodejs.sh
        #!/bin/bash
        set -e

        echo "Installing Node.js 20.x..."
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs

        echo "Node.js installation completed."

        echo "Installing PM2..."
        npm install -g pm2

        echo "PM2 installation completed."
        EOF
        chmod +x install_nodejs.sh

    - name: Install Node.js and PM2
      run: sudo ./install_nodejs.sh

    - name: Create PM2 setup script
      run: |
        echo "Creating PM2 setup script..."
        cat << 'EOF' > setup_pm2.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/nginx_env_vars

        echo "Setting up PM2 for $ENVIRONMENT environment..."

        # Create PM2 ecosystem file
        cat > /opt/thebarcodeapi/$ENVIRONMENT/ecosystem.config.js << EOL
        module.exports = {
          apps : [{
            name: 'thebarcodeapi-$ENVIRONMENT',
            script: 'npm',
            args: 'start',
            cwd: '/opt/thebarcodeapi/$ENVIRONMENT/current',
            instances: 'max',
            autorestart: true,
            watch: false,
            max_memory_restart: '5G',
            env: {
              NODE_ENV: 'production',
              ENVIRONMENT: '$ENVIRONMENT'
            }
          }]
        };
        EOL

        echo "PM2 ecosystem file created."

        # Start the application with PM2
        pm2 start /opt/thebarcodeapi/$ENVIRONMENT/ecosystem.config.js

        # Save the PM2 process list and environment
        pm2 save

        # Generate startup script
        pm2 startup systemd -u appuser --hp /home/appuser

        echo "PM2 setup completed for $ENVIRONMENT environment."
        EOF
        chmod +x setup_pm2.sh

    - name: Setup PM2
      run: |
        # Create a temporary file with environment variables
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" > /tmp/nginx_env_vars

        sudo ./setup_pm2.sh

        # Clean up
        rm -f /tmp/nginx_env_vars

    - name: Create verification script
      run: |
        echo "Creating verification script..."
        cat << 'EOF' > verify_installation.sh
        #!/bin/bash
        set -e

        echo "Verifying installations..."
        echo "Nginx version:"
        nginx -v
        echo "Node.js version:"
        node -v
        echo "npm version:"
        npm -v
        echo "PM2 version:"
        pm2 --version

        echo "Checking Nginx configuration..."
        nginx -t
        echo "Checking Nginx status..."
        systemctl status nginx

        echo "Checking PM2 status..."
        pm2 list

        echo "Verification completed."
        EOF
        chmod +x verify_installation.sh

    - name: Verify Installation
      run: sudo ./verify_installation.sh

    - name: Print Environment Info
      run: |
        echo "Deployed to ${{ env.ENVIRONMENT }} environment"
        echo "Domain: ${{ env.DOMAIN_NAME }}"