name: theBarcodeApi Infrastructure Setup

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
  API_MASTER_KEY: ${{ secrets.API_MASTER_KEY }}
  API_VERSION: ${{ vars.API_VERSION }}

jobs:
  infra-ci-job:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Initial Directories
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}/releases/barcodeAPI"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "/opt/thebarcodeapi/backups"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner "/opt/thebarcodeapi/${ENVIRONMENT}/releases"

    # - name: Configure sudoers
    #   run: |
    #     echo "Configuring sudoers..."
    #     echo "${{ env.SUDO_PASSWORD }}" | sudo -S cat << 'EOF' | sudo tee /etc/sudoers.d/github-runner
    #     # PM2 related commands
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/pm2
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/npm

    #     # System service commands
    #     github-runner ALL=(ALL) NOPASSWD: /bin/systemctl restart nginx
    #     github-runner ALL=(ALL) NOPASSWD: /bin/systemctl reload nginx
    #     github-runner ALL=(ALL) NOPASSWD: /bin/systemctl restart docker
    #     github-runner ALL=(ALL) NOPASSWD: /usr/sbin/nginx -t

    #     # Directory and file operations
    #     github-runner ALL=(ALL) NOPASSWD: /bin/mkdir -p /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/chown -R * /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/chmod -R * /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/rm -f /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/rm -rf /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/cp -R * /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/mv * /opt/thebarcodeapi/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/ln -sf * /opt/thebarcodeapi/*

    #     # Docker related
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/docker
    #     github-runner ALL=(ALL) NOPASSWD: /usr/local/bin/docker-compose
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/docker-compose

    #     # Temp directory operations
    #     github-runner ALL=(ALL) NOPASSWD: /bin/rm -f /tmp/env_vars
    #     github-runner ALL=(ALL) NOPASSWD: /bin/rm -f /tmp/docker_vars
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/tee /tmp/env_vars
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/tee /tmp/docker_vars

    #     # Package management
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/apt-get update
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/apt-get upgrade -y
    #     github-runner ALL=(ALL) NOPASSWD: /usr/bin/apt-get install -y *

    #     # Group management
    #     github-runner ALL=(ALL) NOPASSWD: /usr/sbin/usermod -aG docker github-runner

    #     # Allow nginx configuration
    #     github-runner ALL=(ALL) NOPASSWD: /bin/cp * /etc/nginx/sites-available/*
    #     github-runner ALL=(ALL) NOPASSWD: /bin/ln -sf /etc/nginx/sites-available/* /etc/nginx/sites-enabled/*
    #     EOF

    #     sudo chmod 0440 /etc/sudoers.d/github-runner

    - name: Set PM2 permissions
      run: |
        # Create PM2 home directory with correct permissions
        mkdir -p /home/github-runner/.pm2
        chmod 700 /home/github-runner/.pm2

        # Ensure PM2 files are owned by github-runner
        touch /home/github-runner/.pm2/pm2.log
        chmod 600 /home/github-runner/.pm2/pm2.log

        # Create PM2 startup script directory
        mkdir -p /home/github-runner/.pm2/logs
        chmod 700 /home/github-runner/.pm2/logs

    - name: Create system update script
      run: |
        echo "Creating system update script..."
        cat << 'EOF' > update_system.sh
        #!/bin/bash
        set -e
        echo "Updating system packages..."
        apt-get update
        apt-get upgrade -y
        echo "System update completed."
        EOF
        chmod +x update_system.sh

    - name: Update system
      run: echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./update_system.sh
      continue-on-error: true

    - name: Check and install dependencies
      run: |
        echo "Creating dependency installation script..."
        cat << 'EOF' > install_dependencies.sh
        #!/bin/bash
        set -e

        # Function to check if a command exists
        command_exists() {
          command -v "$1" >/dev/null 2>&1
        }

        # Function to install Docker Compose
        install_docker_compose() {
          echo "Installing Docker Compose..."

          # Create plugin directories
          mkdir -p ~/.docker/cli-plugins/
          mkdir -p /usr/local/lib/docker/cli-plugins

          # Download and install Docker Compose binary
          COMPOSE_URL="https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)"
          curl -L "$COMPOSE_URL" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Install as plugin
          curl -L "$COMPOSE_URL" -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          cp ~/.docker/cli-plugins/docker-compose /usr/local/lib/docker/cli-plugins/docker-compose
        }

        echo "Starting dependency installation check..."

        # Install Nginx if not present
        if ! command_exists nginx; then
          echo "Installing Nginx..."
          apt-get install -y nginx
        else
          echo "Nginx already installed"
        fi

        # Install Node.js if not present
        if ! command_exists node; then
          echo "Installing Node.js 20.x..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
        else
          echo "Node.js already installed"
        fi

        # Install PM2 if not present
        if ! command_exists pm2; then
          echo "Installing PM2..."
          npm install -g pm2
        else
          echo "PM2 already installed"
        fi

        # Install Docker if not present
        if ! command_exists docker; then
          echo "Installing Docker..."
          # Install prerequisites
          apt-get update
          apt-get install -y ca-certificates curl gnupg lsb-release

          # Add Docker's official GPG key
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker Engine
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io

          # Start and enable Docker service
          systemctl start docker
          systemctl enable docker

          # Add github-runner to docker group
          usermod -aG docker github-runner
        else
          echo "Docker already installed"
        fi

        # Install Docker Compose if not present
        if ! (docker compose version || docker-compose --version) &> /dev/null; then
          install_docker_compose
        else
          echo "Docker Compose already installed"
        fi

        # Verify all installations
        echo "Verifying installations..."

        declare -A commands=(
          ["Nginx"]="nginx -v"
          ["Node.js"]="node -v"
          ["PM2"]="pm2 --version"
          ["Docker"]="docker --version"
          ["Docker Compose"]="docker compose version || docker-compose --version"
        )

        for name in "${!commands[@]}"; do
          echo "Checking $name..."
          if ! eval "${commands[$name]}" &> /dev/null; then
            echo "Error: $name installation failed"
            exit 1
          fi
        done

        # Ensure docker group membership
        if ! groups github-runner | grep -q docker; then
          echo "Adding github-runner to docker group..."
          usermod -aG docker github-runner
          echo "Note: You may need to log out and back in for docker group changes to take effect"
        fi

        echo "All installations verified successfully"

        # Display all versions
        echo "Installed versions:"
        nginx -v
        node -v
        pm2 --version
        docker --version
        docker compose version || docker-compose --version
        EOF
        chmod +x install_dependencies.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./install_dependencies.sh

    - name: Configure Nginx
      run: |
        echo "Creating Nginx configuration script..."
        cat << 'EOF' > configure_nginx.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/env_vars

        # Configure Nginx
        echo "Configuring Nginx..."
        cat > /etc/nginx/sites-available/thebarcodeapi << EOL
        server {
            listen 80;
            listen [::]:80;
            server_name 192.168.1.112;
            server_tokens off;

            # Frontend Next.js application
            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }

            # Backend API
            location /api {
                proxy_pass http://localhost:8000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

            # Logging
            access_log /var/log/nginx/thebarcodeapi.access.log;
            error_log /var/log/nginx/thebarcodeapi.error.log warn;
        }
        EOL

        ln -sf /etc/nginx/sites-available/thebarcodeapi /etc/nginx/sites-enabled/
        nginx -t
        EOF
        echo "$SUDO_PASSWORD" | sudo -S chmod +x configure_nginx.sh

        # Create environment variables file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /tmp/env_vars << 'EOF'
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        NODE_ENV=production
        SUDO_PASSWORD=${{ env.SUDO_PASSWORD }}
        EOF"

        # Run configuration script
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./configure_nginx.sh

        # Clean up
        echo "$SUDO_PASSWORD" | sudo -S rm -f /tmp/env_vars

    - name: Configure PM2 for Frontend
      run: |
        echo "Creating PM2 configuration script..."
        cat << 'EOF' > configure_pm2.sh
        #!/bin/bash
        set -e

        # move to theBarcodeAPI directory
        cd /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI

        # Read environment variables from file
        source /tmp/env_vars

        # Create required directories with proper permissions
        echo "Creating required directories..."
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/current
        echo "$SUDO_PASSWORD" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi

        # Configure PM2
        echo "Configuring PM2..."
        cat << EEOF > /opt/thebarcodeapi/${ENVIRONMENT}/ecosystem.config.js
        module.exports = {
          apps: [{
            name: 'thebarcodeapi-frontend-${ENVIRONMENT}',
            script: 'npm',
            args: 'start',
            namespace: '${ENVIRONMENT}',
            env: {
              NODE_ENV: '${ENVIRONMENT}',
              ENVIRONMENT: '${ENVIRONMENT}',
              PORT: 3000,
              NODE_OPTIONS: '--max-old-space-size=512'
            },
            cwd: '/opt/thebarcodeapi/${ENVIRONMENT}/current',
            instances: 2,
            exec_mode: 'fork',
            autorestart: true,
            watch: false,
            max_memory_restart: '512M',
            wait_ready: true,
            listen_timeout: 30000,
            kill_timeout: 5000,
            exp_backoff_restart_delay: 100,
            restart_delay: 2000,
            max_restarts: 3,
            error_file: '/opt/thebarcodeapi/${ENVIRONMENT}/logs/err.log',
            out_file: '/opt/thebarcodeapi/${ENVIRONMENT}/logs/out.log',
            merge_logs: true,
            min_uptime: '60s',
            node_args: '--expose-gc',
            increment_var: 'PORT'
          }]
        };
        EEOF

        # Create log directory
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/logs
        echo "$SUDO_PASSWORD" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/${ENVIRONMENT}/logs

        # Stop and remove existing PM2 processes
        echo "Managing PM2 process..."
        PM2_HOME="/home/github-runner/.pm2" pm2 delete "thebarcodeapi-frontend-${ENVIRONMENT}" || true

        # Wait for processes to fully stop
        sleep 15

        # Clear PM2 logs before starting
        PM2_HOME="/home/github-runner/.pm2" pm2 flush

        # Start PM2 with the new configuration
        cd "/opt/thebarcodeapi/${ENVIRONMENT}/current" || exit 1
        PM2_HOME="/home/github-runner/.pm2" pm2 start /opt/thebarcodeapi/${ENVIRONMENT}/ecosystem.config.js

        # Wait for process to stabilize
        sleep 10

        # Save PM2 configuration
        PM2_HOME="/home/github-runner/.pm2" pm2 save

        # Set final permissions
        echo "$SUDO_PASSWORD" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi
        echo "$SUDO_PASSWORD" | sudo -S chmod -R 755 /opt/thebarcodeapi

        # Show logs to help with debugging
        echo "Recent logs:"
        if [ -f "/opt/thebarcodeapi/${ENVIRONMENT}/logs/err.log" ]; then
          tail -n 50 /opt/thebarcodeapi/${ENVIRONMENT}/logs/err.log
        fi

        # Show PM2 status
        PM2_HOME="/home/github-runner/.pm2" pm2 list
        EOF

        echo "$SUDO_PASSWORD" | sudo -S chmod +x configure_pm2.sh

        # Create environment variables file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /tmp/env_vars << 'EOF'
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        NODE_ENV=production
        SUDO_PASSWORD=${{ env.SUDO_PASSWORD }}
        EOF"

        # Run configuration script
        ./configure_pm2.sh

        # Clean up
        echo "$SUDO_PASSWORD" | sudo -S rm -f /tmp/env_vars

    - name: List source directory contents (Before)
      run: ls -l /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/barcodeAPI/

    - name: List destination directory contents (Before)
      run: ls -l .

    - name: Configure Backend Docker Environment
      run: |
        echo "Creating Docker environment setup script..."
        cat << 'EOF' > setup_docker.sh
        #!/bin/bash
        set -e

        # Read environment variables from file
        source /tmp/env_vars

        # Create necessary directories
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/barcodeAPI
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/backups
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis
        echo "$SUDO_PASSWORD" | sudo -S mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres

        # Navigate to backend directory
        cd /opt/thebarcodeapi/barcodeAPI

        # Copy backend files
        echo "$SUDO_PASSWORD" | sudo -S cp -R /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/barcodeAPI/* .

        # Create .env file before Docker build
        echo "$SUDO_PASSWORD" | sudo -S cat > /opt/thebarcodeapi/barcodeAPI/.env << EOL
        DB_PASSWORD=${DB_PASSWORD}
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        SECRET_KEY=${API_SECRET_KEY}
        MASTER_API_KEY=${API_MASTER_KEY}
        API_VERSION=${API_VERSION}
        DATABASE_URL=postgresql+asyncpg://barcodeboachiefamily:${DB_PASSWORD}@db/barcode_api
        REDIS_URL=redis://redis:6379
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        ENVIRONMENT=${ENVIRONMENT}
        EOL

        # Set permission for .env file
        echo "$SUDO_PASSWORD" | sudo -S chmod 600 /opt/thebarcodeapi/barcodeAPI/.env
        echo "$SUDO_PASSWORD" | sudo -S chown github-runner:github-runner /opt/thebarcodeapi/barcodeAPI/.env

        # Create docker-compose.yml
        cat > docker-compose.yml << EOL
        version: '3.8'

        services:
          api:
            build:
              context: .
              dockerfile: Dockerfile
              args:
                - PYTHON_ENV=production
            ports:
              - "8000:8000"
            depends_on:
              db:
                condition: service_healthy
              redis:
                condition: service_healthy
            env_file:
              - .env
            volumes:
              - ./app:/app/app
              - ./alembic:/app/alembic
              # Don't mount .env as it's copied during build
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 15s
              timeout: 10s
              retries: 3
              start_period: 30s
            restart: unless-stopped
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"

          redis:
            image: redislabs/rejson:latest
            ports:
              - "6379:6379"
            volumes:
              - /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis:/data
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 5s
              timeout: 30s
              retries: 50
            restart: unless-stopped

          db:
            image: postgres:13
            ports:
              - "5432:5432"
            volumes:
              - /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres:/var/lib/postgresql/data
              - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
            environment:
              - POSTGRES_USER=postgres
              - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
              - BARCODE_DB_USER=barcodeboachiefamily
              - BARCODE_DB_PASSWORD=${DB_PASSWORD}
              - BARCODE_DB_NAME=barcode_api
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U barcodeboachiefamily -d barcode_api"]
              interval: 5s
              timeout: 5s
              retries: 5
            restart: unless-stopped
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"

        networks:
          default:
            name: barcodeapi_network
        EOL

        # Create backup script
        cat > /opt/thebarcodeapi/barcodeAPI/backup.sh << EOL
        #!/bin/bash
        TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR="/opt/thebarcodeapi/backups"

        # Backup PostgreSQL
        docker compose exec db pg_dump -U barcodeboachiefamily barcode_api > "\$BACKUP_DIR/db_backup_\$TIMESTAMP.sql"

        # Backup Redis
        docker compose exec redis redis-cli SAVE
        echo "$SUDO_PASSWORD" | sudo -S cp /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis/dump.rdb "\$BACKUP_DIR/redis_backup_\$TIMESTAMP.rdb"

        # Clean old backups (keep last 7 days)
        find \$BACKUP_DIR -name "db_backup_*" -mtime +7 -delete
        find \$BACKUP_DIR -name "redis_backup_*" -mtime +7 -delete
        EOL
        chmod +x /opt/thebarcodeapi/barcodeAPI/backup.sh

        # Set up cron job for backups
        (crontab -l 2>/dev/null; echo "0 0 * * * /opt/thebarcodeapi/barcodeAPI/backup.sh") | crontab -

        # Ensure start.sh is executable
        chmod +x start.sh

        # Create wait-for-it script for startup coordination
        cat > wait-for-it.sh << 'EOL'
        #!/bin/bash
        # wait-for-it.sh script to check service availability

        host="$1"
        port="$2"
        shift 2
        cmd="$@"

        until nc -z "$host" "$port"; do
          echo "Waiting for $host:$port..."
          sleep 1
        done

        echo "$host:$port is available"
        exec $cmd
        EOL
        chmod +x wait-for-it.sh

        # Set permissions
        chown -R github-runner:github-runner /opt/thebarcodeapi
        chmod -R 755 /opt/thebarcodeapi/barcodeAPI

        echo "Docker environment setup completed"
        EOF
        chmod +x setup_docker.sh

        # Create environment variables file
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /tmp/env_vars << 'EOF'
        ENVIRONMENT=${{ env.ENVIRONMENT }}
        NODE_ENV=production
        SUDO_PASSWORD=${{ env.SUDO_PASSWORD }}
        API_SECRET_KEY=${{ env.API_SECRET_KEY }}
        API_MASTER_KEY=${{ env.API_MASTER_KEY }}
        DB_PASSWORD=${{ env.DB_PASSWORD }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        API_VERSION=${{ env.API_VERSION }}
        EOF"

        # Run setup script
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./setup_docker.sh

        # Clean up
        echo "$SUDO_PASSWORD" | sudo -S  rm -f /tmp/env_vars

    - name: List source directory contents (Before)
      run: ls -l /home/github-runner/actions-runner/_work/theBarcodeAPI/theBarcodeAPI/barcodeAPI/

    - name: List destination directory contents (Before)
      run: ls -l .

    - name: Fix Permissions
      run: |
        echo "Fixing permissions..."
        cat << 'EOF' > fix_permissions.sh
        #!/bin/bash
        set -e

        # Create required directories if they don't exist
        mkdir -p /opt/thebarcodeapi/barcodeAPI
        mkdir -p /opt/thebarcodeapi/${ENVIRONMENT}/releases/data
        mkdir -p /opt/thebarcodeapi/backups

        # Set ownership
        chown -R github-runner:github-runner /opt/thebarcodeapi

        # Set directory permissions
        find /opt/thebarcodeapi -type d -exec chmod 755 {} \;

        # Set file permissions
        find /opt/thebarcodeapi -type f -exec chmod 644 {} \;

        # Make scripts executable
        find /opt/thebarcodeapi -name "*.sh" -exec chmod +x {} \;

        # Ensure special permissions for sensitive files
        if [ -f "/opt/thebarcodeapi/barcodeAPI/.env" ]; then
          chmod 600 /opt/thebarcodeapi/barcodeAPI/.env
        fi

        # Set proper permissions for Docker socket
        if [ -S /var/run/docker.sock ]; then
          chmod 666 /var/run/docker.sock
        fi

        # set theBarcodeAPI directory permissions
        chown -R github-runner:github-runner /opt/thebarcodeapi/barcodeAPI

        # set ownership for backup folder
        chown github-runner:github-runner /opt/thebarcodeapi/backups
        echo "Permissions fixed successfully"
        EOF

        chmod +x fix_permissions.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./fix_permissions.sh

    - name: Configure Backup Coordination
      run: |
        echo "Setting up backup coordination..."
        # First create script locally
        cat << 'EOF' > pre-backup-check.sh
        #!/bin/bash
        set -e

        # Check if deployment is in progress
        if [ -f "/opt/thebarcodeapi/deployment.lock" ]; then
          echo "Deployment in progress, skipping backup"
          exit 0
        fi

        # Proceed with backup
        /opt/thebarcodeapi/barcodeAPI/backup.sh
        EOF
        chmod +x pre-backup-check.sh

        # Move to destination with sudo
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mv pre-backup-check.sh /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown github-runner:github-runner /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 755 /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh

        # Update cron job with sudo
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c '(crontab -l 2>/dev/null | grep -v "backup.sh" | grep -v "pre-backup-check.sh") | crontab -'
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c '(crontab -l 2>/dev/null; echo "0 0 * * * /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh") | crontab -'

    - name: Add Cleanup Routine
      run: |
        # First create the script in current directory
        cat << 'EOF' > cleanup.sh
        #!/bin/bash
        set -e

        # Clean old frontend releases
        find /opt/thebarcodeapi/${ENVIRONMENT}/releases -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \;

        # Clean old backups (keep last 30 days)
        find /opt/thebarcodeapi/backups -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \;

        # Clean Docker
        docker system prune -f --filter "until=168h"
        EOF
        chmod +x cleanup.sh

        # Then move it to the target location with sudo
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mv cleanup.sh /opt/thebarcodeapi/cleanup.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown github-runner:github-runner /opt/thebarcodeapi/cleanup.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 755 /opt/thebarcodeapi/cleanup.sh

        # Add weekly cleanup to cron with sudo
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c '(crontab -l 2>/dev/null; echo "0 0 * * 0 /opt/thebarcodeapi/cleanup.sh") | crontab -'

    - name: Error Check
      run: |
        # Check if critical files exist
        for file in "/opt/thebarcodeapi/barcodeAPI/backup.sh" "/opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh" "/opt/thebarcodeapi/cleanup.sh"; do
          if [ ! -x "$file" ]; then
            echo "Error: $file is not executable or doesn't exist"
            exit 1
          fi
        done

    - name: Verify Setup
      run: |
        echo "Verifying setup..."
        cat << 'EOF' > verify_setup.sh
        #!/bin/bash
        set -e

        # Function to create directory with proper permissions if it doesn't exist
        create_directory() {
          local dir="$1"
          if [ ! -d "$dir" ]; then
            echo "Creating directory: $dir"
            sudo mkdir -p "$dir"
            sudo chown github-runner:github-runner "$dir"
            sudo chmod 755 "$dir"
          fi
        }

        # Function to create executable script if it doesn't exist
        create_script() {
          local script="$1"
          local content="$2"
          if [ ! -f "$script" ]; then
            echo "Creating script: $script"
            echo "$content" | sudo tee "$script" > /dev/null
            sudo chmod +x "$script"
            sudo chown github-runner:github-runner "$script"
          elif [ ! -x "$script" ]; then
            echo "Making script executable: $script"
            sudo chmod +x "$script"
          fi
        }

        # Create and verify base directory
        echo "Setting up base directory..."
        sudo mkdir -p /opt/thebarcodeapi
        sudo chown github-runner:github-runner /opt/thebarcodeapi
        sudo chmod 755 /opt/thebarcodeapi

        # Create and verify required directories
        echo "Checking directory structure..."
        for dir in barcodeAPI data backups; do
          create_directory "/opt/thebarcodeapi/$dir"
        done

        # Create wait-for-it script if it doesn't exist
        echo "Setting up wait-for-it script..."
        WAIT_SCRIPT="/opt/thebarcodeapi/barcodeAPI/wait-for-it.sh"
        create_script "$WAIT_SCRIPT" '#!/bin/bash
        timeout=15
        while ! nc -z "$1" "$2"; do
          if [ "$timeout" -le 0 ]; then
            echo "Timeout waiting for $1:$2"
            exit 1
          fi
          echo "Waiting for $1:$2... ($timeout seconds left)"
          timeout=$((timeout-1))
          sleep 1
        done'

        # Create backup scripts if they don't exist
        echo "Setting up backup scripts..."

        BACKUP_SCRIPT="/opt/thebarcodeapi/barcodeAPI/backup.sh"
        create_script "$BACKUP_SCRIPT" '#!/bin/bash
        timestamp=$(date +%Y%m%d_%H%M%S)
        backup_dir="/opt/thebarcodeapi/backups"
        tar -czf "$backup_dir/backup_$timestamp.tar.gz" -C /opt/thebarcodeapi/data .'

        PRE_BACKUP_SCRIPT="/opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh"
        create_script "$PRE_BACKUP_SCRIPT" '#!/bin/bash
        if [ $(df -P /opt/thebarcodeapi/backups | tail -1 | awk '"'"'{print $5}'"'"' | sed '"'"'s/%//'"'"') -gt 90 ]; then
          echo "Backup directory is over 90% full"
          exit 1
        fi'

        # Set up cron job if it doesn't exist
        echo "Setting up cron job..."
        if ! sudo crontab -l 2>/dev/null | grep -q "pre-backup-check.sh"; then
          (sudo crontab -l 2>/dev/null; echo "0 1 * * * /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh") | sudo crontab -
        fi

        # Verify final permissions
        echo "Verifying final permissions..."
        sudo chown -R github-runner:github-runner /opt/thebarcodeapi
        sudo chmod -R 755 /opt/thebarcodeapi

        echo "Setup verified and completed successfully"
        EOF

        chmod +x verify_setup.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ./verify_setup.sh

    - name: Verify Repository Structure
      run: |
        if [ ! -d "barcodeAPI" ]; then
          echo "Error: barcodeAPI directory not found!"
          exit 1
        fi

        if [ ! -f "barcodeAPI/requirements.txt" ]; then
          echo "Error: requirements.txt not found in barcodeAPI directory!"
          exit 1
        fi

        if [ ! -f "barcodeAPI/start.sh" ]; then
          echo "Error: start.sh not found in barcodeAPI directory!"
          exit 1
        fi

    - name: Clean up scripts
      run: |
        echo "Cleaning up..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f update_system.sh install_dependencies.sh configure_nginx.sh configure_pm2.sh setup_docker.sh verify_setup.sh setup_backup.sh fix_permissions.sh

    - name: Start Services
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S systemctl restart nginx

    - name: Restart Docker
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S systemctl restart docker
        # Wait for Docker to be ready
        sleep 5

    - name: Print Environment Info (for debugging)
      run: |
        echo "Deployed to ${{ env.ENVIRONMENT }} environment"
        echo "Domain: ${{ env.DOMAIN_NAME }}"