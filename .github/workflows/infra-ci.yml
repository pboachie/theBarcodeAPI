name: theBarcodeApi Infrastructure Setup

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
  API_MASTER_KEY: ${{ secrets.API_MASTER_KEY }}
  API_VERSION: ${{ vars.API_VERSION }}

jobs:
  infra-ci-job:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Initial Directories
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/data/postgres
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/data/redis
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p /opt/thebarcodeapi/backups
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "/opt/thebarcodeapi/${ENVIRONMENT}/releases"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi

    - name: Configure sudoers
      run: |
        echo "Configuring sudoers..."
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /etc/sudoers.d/github-runner << EOF
        github-runner ALL=(ALL) NOPASSWD: /usr/bin/pm2, /usr/bin/npm, /usr/bin/docker, /usr/bin/docker-compose
        EOF'
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 0440 /etc/sudoers.d/github-runner

    - name: Install and Configure Dependencies
      run: |
        # Update package list
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S apt-get update

        # Install Node.js if not present
        if ! command -v node &> /dev/null; then
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
        fi

        # Install PM2 if not present
        if ! command -v pm2 &> /dev/null; then
          sudo npm install -g pm2
        fi

        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com | sudo sh
          sudo usermod -aG docker $USER
        fi

        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi

        # Install Nginx if not present
        if ! command -v nginx &> /dev/null; then
          sudo apt-get install -y nginx
        fi

    - name: Configure Nginx
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /etc/nginx/sites-available/thebarcodeapi << 'EOF'
        server {
            listen 80;
            listen [::]:80;
            server_name 192.168.1.112;
            server_tokens off;

            location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }

            location /api {
                proxy_pass http://localhost:8000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
            }

            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

            # Logging
            access_log /var/log/nginx/thebarcodeapi.access.log;
            error_log /var/log/nginx/thebarcodeapi.error.log warn;
        }
        EOF"

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S ln -sf /etc/nginx/sites-available/thebarcodeapi /etc/nginx/sites-enabled/
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S rm -f /etc/nginx/sites-enabled/default
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S nginx -t

    - name: Configure PM2
      run: |
        echo "Configuring PM2..."
        PM2_CONFIG_DIR="/opt/thebarcodeapi/${ENVIRONMENT}"
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S mkdir -p "$PM2_CONFIG_DIR"

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > $PM2_CONFIG_DIR/ecosystem.config.js << EOF
        module.exports = {
          apps: [{
            name: 'thebarcodeapi-frontend-${ENVIRONMENT}',
            script: 'npm',
            args: 'start',
            cwd: '/opt/thebarcodeapi/${ENVIRONMENT}/current',
            instances: 1,
            autorestart: true,
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production',
              ENVIRONMENT: '${ENVIRONMENT}'
            }
          }]
        }
        EOF"

    - name: Configure Backup Scripts
      run: |
        # Create backup script
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /opt/thebarcodeapi/barcodeAPI/backup.sh << 'EOF'
        #!/bin/bash
        set -e

        TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR="/opt/thebarcodeapi/backups/\${TIMESTAMP}"
        mkdir -p \"\$BACKUP_DIR\"

        # Backup PostgreSQL
        if docker compose ps 2>/dev/null | grep -q db; then
          echo \"Creating PostgreSQL backup...\"
          docker compose exec -T db pg_dumpall -U postgres > \"\$BACKUP_DIR/postgres_backup.sql\"
        fi

        # Backup Redis
        if docker compose ps 2>/dev/null | grep -q redis; then
          echo \"Creating Redis backup...\"
          docker compose exec -T redis redis-cli SAVE
          docker cp \$(docker compose ps -q redis):/data/dump.rdb \"\$BACKUP_DIR/redis_dump.rdb\"
        fi

        # Compress backup
        tar -czf \"\$BACKUP_DIR.tar.gz\" -C \"\$BACKUP_DIR\" .
        rm -rf \"\$BACKUP_DIR\"

        # Cleanup old backups (keep last 7 days)
        find /opt/thebarcodeapi/backups -name \"*.tar.gz\" -mtime +7 -delete
        EOF"

        # Create backup coordination script
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /opt/thebarcodeapi/barcodeAPI/backup-coordinator.sh << 'EOF'
        #!/bin/bash
        set -e

        # Check for deployment lock
        if [ -f \"/opt/thebarcodeapi/deployment.lock\" ]; then
          echo \"Deployment in progress, skipping backup\"
          exit 0
        fi

        # Create lock file
        touch /opt/thebarcodeapi/backup.lock

        # Run backup
        /opt/thebarcodeapi/barcodeAPI/backup.sh

        # Remove lock file
        rm -f /opt/thebarcodeapi/backup.lock
        EOF"

        # Make scripts executable
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x /opt/thebarcodeapi/barcodeAPI/backup.sh
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x /opt/thebarcodeapi/barcodeAPI/backup-coordinator.sh

        # Set up cron job for nightly backups
        (crontab -l 2>/dev/null | grep -v "backup-coordinator.sh"; echo "0 0 * * * /opt/thebarcodeapi/barcodeAPI/backup-coordinator.sh") | crontab -

    - name: Configure Cleanup Routine
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /opt/thebarcodeapi/cleanup.sh << 'EOF'
        #!/bin/bash
        set -e

        # Wait if backup or deployment is in progress
        if [ -f \"/opt/thebarcodeapi/backup.lock\" ] || [ -f \"/opt/thebarcodeapi/deployment.lock\" ]; then
          echo \"Backup or deployment in progress, skipping cleanup\"
          exit 0
        fi

        # Clean old frontend releases
        find /opt/thebarcodeapi/${ENVIRONMENT}/releases -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \;

        # Clean old backups (keep last 30 days)
        find /opt/thebarcodeapi/backups -type f -name \"*.tar.gz\" -mtime +30 -delete

        # Clean Docker
        docker system prune -f --volumes --filter \"until=168h\"

        # Clean logs
        find /opt/thebarcodeapi/logs -type f -mtime +30 -delete

        # Clean temporary files
        find /opt/thebarcodeapi/tmp -type f -mtime +7 -delete
        EOF"

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x /opt/thebarcodeapi/cleanup.sh

        # Set up weekly cleanup cron job
        (crontab -l 2>/dev/null | grep -v "cleanup.sh"; echo "0 0 * * 0 /opt/thebarcodeapi/cleanup.sh") | crontab -

    - name: Configure Monitoring
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S bash -c "cat > /opt/thebarcodeapi/monitor.sh << 'EOF'
        #!/bin/bash
        set -e

        # Check frontend service
        if ! curl -s http://localhost:3000/health > /dev/null; then
          echo \"Frontend service is down!\"
          pm2 restart thebarcodeapi-frontend-${ENVIRONMENT}
        fi

        # Check backend service
        if ! curl -s http://localhost:8000/health > /dev/null; then
          echo \"Backend service is down!\"
          docker compose restart api
        fi

        # Check Redis
        if ! docker compose exec -T redis redis-cli ping > /dev/null; then
          echo \"Redis is down!\"
          docker compose restart redis
        fi

        # Check PostgreSQL
        if ! docker compose exec -T db pg_isready -U postgres > /dev/null; then
          echo \"PostgreSQL is down!\"
          docker compose restart db
        fi
        EOF"

        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod +x /opt/thebarcodeapi/monitor.sh

        # Set up monitoring cron job (every 5 minutes)
        (crontab -l 2>/dev/null | grep -v "monitor.sh"; echo "*/5 * * * * /opt/thebarcodeapi/monitor.sh") | crontab -

    - name: Configure Permissions
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod 666 /var/run/docker.sock
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R www-data:www-data /opt/thebarcodeapi
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chown -R github-runner:github-runner /opt/thebarcodeapi/barcodeAPI
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S chmod -R 755 /opt/thebarcodeapi

    - name: Verify Setup
      run: |
        # Check directories
        for dir in "/opt/thebarcodeapi/barcodeAPI" "/opt/thebarcodeapi/data/postgres" "/opt/thebarcodeapi/data/redis" "/opt/thebarcodeapi/backups"; do
          if [ ! -d "$dir" ]; then
            echo "Error: Directory $dir not found"
            exit 1
          fi
        done

        # Check scripts
        for script in "backup.sh" "backup-coordinator.sh" "cleanup.sh" "monitor.sh"; do
          if [ ! -x "/opt/thebarcodeapi/barcodeAPI/$script" ]; then
            echo "Error: $script not executable"
            exit 1
          fi
        done

        # Check cron jobs
        if ! crontab -l | grep -q "backup-coordinator.sh"; then
          echo "Error: Backup cron job not found"
          exit 1
        fi

        if ! crontab -l | grep -q "cleanup.sh"; then
          echo "Error: Cleanup cron job not found"
          exit 1
        fi

        if ! crontab -l | grep -q "monitor.sh"; then
          echo "Error: Monitor cron job not found"
          exit 1
        fi

        # Check installed software
        for cmd in node npm pm2 docker docker-compose nginx; do
          if ! command -v $cmd &> /dev/null; then
            echo "Error: $cmd not found"
            exit 1
          fi
        done

        # Check Nginx configuration
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S nginx -t

        # Check Docker
        docker ps &> /dev/null || {
          echo "Error: Docker not running properly"
          exit 1
        }

    - name: Start Services
      run: |
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S systemctl restart nginx
        echo "${{ env.SUDO_PASSWORD }}" | sudo -S systemctl restart docker
        sleep 5

    - name: Print Environment Info
      run: |
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Domain: ${{ env.DOMAIN_NAME }}"
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "PM2 version: $(pm2 -v)"
        echo "Docker version: $(docker -v)"
        echo "Docker Compose version: $(docker-compose -v)"
        echo "Nginx version: $(nginx -v)"
