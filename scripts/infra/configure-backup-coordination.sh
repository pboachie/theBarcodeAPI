# ---
# Purpose:
#   Creates a pre-backup check script (/opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh)
#   and sets up a cron job to run it daily.
#   The pre-backup-check.sh script is intended to:
#     - Check if a deployment is currently in progress (by looking for a lock file).
#     - If no deployment is in progress, it executes the main backup script
#       (/opt/thebarcodeapi/barcodeAPI/backup.sh, which should be created by setup-docker-env.sh).
#
# Environment Variables (expected from /tmp/env_vars or direct pass for SUDO_PASSWORD):
#   - SUDO_PASSWORD: Password for sudo execution, used for file operations and crontab management.
#   - ENVIRONMENT: The deployment environment. While not directly used in this script's logic,
#                  it's sourced from /tmp/env_vars and might be relevant for context or future modifications.
#                  The generated pre-backup-check.sh does not currently use $ENVIRONMENT.
#
# Outputs:
#   - Creates /opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh.
#   - Adds a cron job to execute this script daily.
#   - Logs the setup process.
# ---
#!/bin/bash
set -e

echo "Starting setup of backup coordination..."

# Attempt to source environment variables if /tmp/env_vars exists
if [ -f /tmp/env_vars ]; then
  source /tmp/env_vars
  echo "Sourced environment variables from /tmp/env_vars."
else
  echo "Warning: /tmp/env_vars not found. Relying on SUDO_PASSWORD being directly available."
fi

# Ensure critical variables are set
if [ -z "$SUDO_PASSWORD" ]; then
  echo "Error: SUDO_PASSWORD environment variable is not set."
  exit 1
fi
# ENVIRONMENT is not strictly needed by this script's current logic but good to check if sourced
if [ -f /tmp/env_vars ] && [ -z "$ENVIRONMENT" ]; then
    echo "Warning: ENVIRONMENT is not set in /tmp/env_vars, though not directly used by this script."
fi

# Content for the pre-backup-check.sh script
# This script acts as a wrapper for the main backup script.
# It checks for a deployment lock file to prevent backups during active deployments.
PRE_BACKUP_CHECK_CONTENT='#!/bin/bash
set -e
# ---
# This script is auto-generated by scripts/infra/configure-backup-coordination.sh
# Purpose: Checks for a deployment lock before running the main backup script.
# ---

DEPLOYMENT_LOCK_FILE="/opt/thebarcodeapi/deployment.lock" # Example lock file path

echo "Executing pre-backup check at $(date)..."

if [ -f "\$DEPLOYMENT_LOCK_FILE" ]; then
  echo "Deployment in progress (lock file found: \${DEPLOY_LOCK_FILE}). Skipping backup."
  exit 0
fi

echo "No deployment lock found. Proceeding with backup..."
# Path to the main backup script (created by setup-docker-env.sh)
MAIN_BACKUP_SCRIPT="/opt/thebarcodeapi/barcodeAPI/backup.sh"

if [ -x "\$MAIN_BACKUP_SCRIPT" ]; then
  "\$MAIN_BACKUP_SCRIPT"
  echo "Main backup script execution finished."
else
  echo "Error: Main backup script \${MAIN_BACKUP_SCRIPT} not found or not executable."
  exit 1
fi
' # End of PRE_BACKUP_CHECK_CONTENT

# Create pre-backup-check.sh script locally first
TEMP_SCRIPT_PATH="./pre-backup-check_temp.sh"
echo "Creating temporary pre-backup check script at ${TEMP_SCRIPT_PATH}..."
printf '%s\n' "$PRE_BACKUP_CHECK_CONTENT" > "$TEMP_SCRIPT_PATH"
chmod +x "$TEMP_SCRIPT_PATH"

# Define the target path for the script on the server
TARGET_SCRIPT_PATH="/opt/thebarcodeapi/barcodeAPI/pre-backup-check.sh"
echo "Moving temporary script to ${TARGET_SCRIPT_PATH} using sudo..."
echo "${SUDO_PASSWORD}" | sudo -S mv "$TEMP_SCRIPT_PATH" "$TARGET_SCRIPT_PATH"
echo "${SUDO_PASSWORD}" | sudo -S chown "${USER}:${USER}" "$TARGET_SCRIPT_PATH"
echo "${SUDO_PASSWORD}" | sudo -S chmod 755 "$TARGET_SCRIPT_PATH"
echo "Pre-backup check script deployed to ${TARGET_SCRIPT_PATH}."

# Set up the cron job for the pre-backup check script
echo "Updating cron job for backup coordination..."
CRON_JOB_EXEC_PATH="$TARGET_SCRIPT_PATH" # Path to the script to be executed by cron
CRON_SCHEDULE="0 0 * * *" # Runs daily at midnight

# Safely remove any existing cron job for this specific script path or the old backup.sh path, then add the new one.
# This prevents duplicate cron entries.
echo "${SUDO_PASSWORD}" | sudo -S bash -c "(crontab -l 2>/dev/null | grep -v -F '${CRON_JOB_EXEC_PATH}' | grep -v -F '/opt/thebarcodeapi/barcodeAPI/backup.sh' ; echo '${CRON_SCHEDULE} ${CRON_JOB_EXEC_PATH}') | crontab -"
echo "Cron job for backup coordination updated/added. Current crontab (for the user executing this, likely root via sudo):"
echo "${SUDO_PASSWORD}" | sudo -S crontab -l

echo "Backup coordination setup complete."
