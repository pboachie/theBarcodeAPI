version: '3.8'

services:
  barcodeApi:
    build:
      context: ./barcodeApi
      dockerfile: Dockerfile
      args:
        - VERSION_ARG=${PROJECT_VERSION:-0.0.0-default}
        - PYTHON_ENV=${ENVIRONMENT:-production}
    ports:
      - "${API_PORT:-8000}:8000" # Allow host port to be configured via .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./barcodeApi/.env
    environment:
      - APP_VERSION=${PROJECT_VERSION:-0.0.0-default}
    volumes:
      - ./barcodeApi/app:/app/app:rw
      - ./barcodeApi/alembic:/app/alembic:rw
      - ./barcodeApi/data:/app/data
      - ./barcodeApi/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '${API_CPUS:-4.0}'
          memory: ${API_MEMORY:-2G}

  barcodeFrontend:
    build:
      context: ./barcodeFrontend
      dockerfile: Dockerfile
      args:
        - VERSION_ARG=${PROJECT_VERSION:-0.0.0-default}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # Example: Making the backend API URL available to Next.js
      # This needs to be prefixed with NEXT_PUBLIC_ for Next.js to pick it up client-side
      - NEXT_PUBLIC_API_URL=http://barcodeApi:${API_PORT:-8000}
      - NEXT_PUBLIC_APP_VERSION=${PROJECT_VERSION:-0.0.0-default} # Pass version for runtime access
      # Add other necessary frontend environment variables here
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPUS:-2.0}' # Allow configuration via .env
          memory: ${FRONTEND_MEMORY:-1G} # Allow configuration via .env
    # If the frontend needs the backend to be up to start (e.g. for some build steps, unlikely for Next.js)
    # depends_on:
    #   - barcodeApi

  redis:
    image: redislabs/rejson:latest
    ports:
      - "${REDIS_PORT:-6379}:6379" # Allow host port to be configured via .env
    volumes:
      # Changed to a named volume for better Docker management, or use a project-relative path
      - redis_data:/data
      # Original: - /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY:-512M} # Allow configuration via .env
    command: ["redis-server", "--appendonly", "yes"]

  db:
    image: postgres:13
    ports:
      - "${DB_PORT:-5432}:5432" # Allow host port to be configured via .env
    volumes:
      # Changed to a named volume for better Docker management, or use a project-relative path
      - postgres_data:/var/lib/postgresql/data
      # Original: - /opt/thebarcodeapi/${ENVIRONMENT}/releases/data/postgres:/var/lib/postgresql/data
      - ./barcodeApi/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro # Updated path
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BARCODE_DB_USER=${BARCODE_DB_USER:-barcodeboachiefamily}
      - BARCODE_DB_PASSWORD=${DB_PASSWORD}
      - BARCODE_DB_NAME=${BARCODE_DB_NAME:-barcode_api}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD:-md5}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BARCODE_DB_USER:-barcodeboachiefamily} -d ${BARCODE_DB_NAME:-barcode_api}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: ${DB_MEMORY:-1G} # Allow configuration via .env

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: barcodeproject_network
